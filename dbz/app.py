# ===================
# Imports
# ===================

import os
import json

# For jsonifying 'Decimal' type generated by SQLAlchemy. Just importing it fixes it.
# See https://github.com/pallets/flask/issues/835
import simplejson

from flask import Flask, render_template, url_for, jsonify, request
from dotenv import load_dotenv

from flask_sqlalchemy import SQLAlchemy

# MongoDB Imports
from pymongo import MongoClient
# from flask_pymongo import PyMongo
import bson.json_util as json_util

# Neo4j Imports
from dbz.neo4j_source.neo4j_app import CustomNeoApp

app = Flask(__name__)
load_dotenv()

# ===================
# Configs
# ===================

app.config['TEMPLATES_AUTO_RELOAD'] = True  # Force update on html on change
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv("MYSQL_URI")
app.config['MONGO_URI'] = os.getenv("MONGO_URI")

MONGO_USERNAME = os.getenv("MONGO_USERNAME")
MONGO_PASSWORD = os.getenv("MONGO_PASSWORD")
MONGO_URI = os.getenv("MONGO_URI")

NEO_USERNAME = os.getenv("NEO_USERNAME")
NEO_PASSWORD = os.getenv("NEO_PASSWORD")
NEO_URI = os.getenv("NEO_URI")

debug = True
port = 5000

# ===================
# DB Connections
# ===================

# MySQL
mysql_db = SQLAlchemy(app)

# MongoDB
mongo = MongoClient(MONGO_URI)
mongo_db = mongo["corona"]
mongo_cursor = mongo_db["data"]

# Neo4j
neo_driver = CustomNeoApp(NEO_URI, NEO_USERNAME, NEO_PASSWORD)


# ===================
# Views
# ===================

@app.route('/')
def index():
    return render_template("home.html")


@app.route('/mysql')
def mysql():

    # Get world-stats
    query = """
    SELECT * 
    FROM `covid_adb`.FACT_world_events;
    """

    resultproxy = mysql_db.engine.execute(query)

    x = resultproxy.fetchone()

    total_cases = '{:,}'.format(int(x['total_cases']))
    total_deaths = '{:,}'.format(int(x['total_deaths']))
    total_tests = '{:,}'.format(int(x['total_tests']))

    # Get latest date
    query = """
    SELECT date 
    FROM DIM_date
    ORDER BY date DESC;
    """

    result_dates = mysql_db.engine.execute(query)

    latest_date = result_dates.fetchone()['date']

    return render_template("mysql.html",
                           total_cases=total_cases,
                           total_deaths=total_deaths,
                           total_tests=total_tests,
                           latest_date=latest_date)


@app.route('/mongo')
def mongo():
    return render_template("mongo.html")


@app.route('/neo')
def neo():
    return render_template("neo.html")


@app.route('/login')
def login():
    return render_template("login.html")


# ===================
# API Calls
# ===================

"""
    Fyll inn query som henter:
        
        location, sum(new_cases), sum(new_deaths), sum(tests)
    
    Dataen skal formateres slik:
    
        data = [
            {confirmed: 43123, deaths: 213123, location: afgh, tests: 12312}
        ]
        
"""


@app.route('/api-test', methods=["GET"])
def api_test():
    """
    Eksempel endpoint som blir kalt i home.js (api_call_example)
    :return:
    """
    dict_of_items = {
        "test": 123,
        "helo": "wrld"
    }

    return jsonify(dict_of_items)


@app.route('/mysql-stats', methods=["GET"])
def mysql_stats():
    query = """
    SELECT c.name AS location, SUM(e.new_cases) as confirmed, SUM(e.new_deaths) as deaths, SUM(e.new_tests) as tests
    FROM DIM_country as c, DIM_events AS e
    WHERE c.iso_code=e.iso_code
    GROUP BY location
    """

    resultproxy = mysql_db.engine.execute(query)

    return jsonify([dict(row) for row in resultproxy])


@app.route('/mongo-stats', methods=["GET"])
def mongo_stats():
    data = mongo_cursor.aggregate([
        {
            "$group": {
                "_id": "$location",
                "confirmed": {"$sum": "$new_cases"},
                "deaths": {"$sum": "$new_deaths"},
                "tests": {"$sum": "$new_tests"},
            }
        }, {
            "$addFields": {
                "location": "$_id"
            }
        },
        {
            "$project": {"_id": 0}
        },
        {
            "$sort": {"location": 1}
        }
    ])

    return json_util.dumps(data)


@app.route('/neo-stats', methods=["GET"])
def neo_stats():
    data = neo_driver.get_common_summary()
    return jsonify(data)


# ===================
# Site specific api calls
# ===================

@app.route('/neo/country', methods=["GET"])
def neo_country():
    countries_continents = neo_driver.get_countries_continents()
    return jsonify(countries_continents)


@app.route('/neo/continent', methods=["GET"])
def neo_continent():
    continent_name = request.args.get('name')
    continent_name = continent_name.title()  # Properly capitalize
    continent_stats = neo_driver.get_continent_stats(continent_name)
    return jsonify(continent_stats)


# TODO: DELETE
@app.route('/mysql/poop', methods=["GET"])
def mysql_poop():
    query = """
    SELECT *
    FROM `covid_adb`.FACT_world_events;
    """

    resultproxy = mysql_db.engine.execute(query)

    return jsonify([dict(row) for row in resultproxy])


@app.route('/mysql/scatter', methods=["GET"])
def mysql_scatter():
    query = """
    SELECT name, median_age, total_deaths
    FROM 
        `covid_adb`.FACT_country_events
        NATURAL JOIN DIM_country
    WHERE
        median_age <> 0;
    """

    resultproxy = mysql_db.engine.execute(query)

    return jsonify([dict(row) for row in resultproxy])


@app.route('/mysql/million', methods=["GET"])
def mysql_million():
    query = """
    SELECT 
        name,
        cases_per_million,
        deaths_per_million,
        tests_per_million
    FROM 
        `covid_adb`.FACT_per_million_events E
        NATURAL JOIN DIM_country C
    ORDER BY name DESC;
    """

    resultproxy = mysql_db.engine.execute(query)

    return jsonify([dict(row) for row in resultproxy])


@app.route('/mysql/month', methods=["GET"])
def mysql_month():
    query = """
    SELECT 
        month,
        year,
        total_cases,
        total_deaths,
        total_tests
    FROM 
        `covid_adb`.FACT_events_year_month;
    """

    resultproxy = mysql_db.engine.execute(query)

    return jsonify([dict(row) for row in resultproxy])


@app.route('/mysql/map', methods=["GET"])
def mysql_map():
    query = """
    SELECT 
        name, 
        total_deaths
    FROM
        `covid_adb`.FACT_country_events CE
        NATURAL JOIN DIM_country C;
    """

    resultproxy = mysql_db.engine.execute(query)

    return jsonify([dict(row) for row in resultproxy])


@app.route('/mongo/scatter', methods=["GET"])
def mongo_scatter():
    data = mongo_cursor.aggregate([
        {
            "$group": {
                "_id": "$location",
                "median_age": {"$first": "$median_age"},
                "total_deaths": {"$sum": "$new_deaths"}
            }
        }, {
            "$addFields": {
                "name": "$_id"
            }
        },
        {
            "$project": {
                "_id": 0
            }
        },
        {
            "$sort": {"name": 1}
        },
        {
            "$match": {"median_age": {"$ne": None}}
        }
    ])

    return json_util.dumps(data)


@app.route('/mongo/million', methods=["GET"])
def mongo_million():
    data = mongo_cursor.aggregate([
        {
            "$group": {
                "_id": "$location",
                "cases_per_million": {"$sum": "$new_cases"},
                "deaths_per_million": {"$sum": "$new_deaths"},
                "tests_per_million": {"$sum": "$new_tests"},
                "population": {"$first": "$population"}
            }
        },
        {
            "$addFields": {
                "name": "$_id"
            }
        }, {
            "$project": {
                "_id": 0,
                "name": 1,
                "cases_per_million": {"$round": [
                    {"$divide": ["$cases_per_million", {"$divide": ["$population", 1000000]}]}, 2]
                },
                "deaths_per_million": {"$round": [
                    {"$divide": ["$deaths_per_million", {"$divide": ["$population", 1000000]}]}, 2]
                },
                "tests_per_million": {"$round": [
                    {"$divide": ["$tests_per_million", {"$divide": ["$population", 1000000]}]}, 2]
                }
            }
        }, {
            "$sort": {"name": 1}
        }
    ])

    return json_util.dumps(data)


@app.route('/mongo/month', methods=["GET"])
def mongo_month():
    data = mongo_cursor.aggregate([
        {
            "$group": {
                "_id": {
                    "month": "$month",
                    "year": "$year"
                },
                "total_cases": {"$sum": "$new_cases"},
                "total_deaths": {"$sum": "$new_deaths"},
                "total_tests": {"$sum": "$new_tests"}
            }
        }, {
            "$addFields": {
                "month": "$_id.month",
                "year": "$_id.year"
            }
        }, {
            "$sort": {"year": 1, "month": 1}
        }, {
            "$project": {"_id": 0, "month": 1, "year": 1, "total_cases": 1, "total_deaths": 1, "total_tests": 1}
        }
    ])

    return json_util.dumps(data)


@app.route('/mongo/map', methods=["GET"])
def mongo_map():
    data = mongo_cursor.aggregate([
        {
            "$group": {
                "_id": "$location",
                "total_deaths": {"$sum": "$new_deaths"}
            }
        }, {
            "$addFields": {
                "name": "$_id"
            }
        },
        {
            "$project": {
                "_id": 0
            }
        },
        {
            "$sort": {"name": 1}
        }
    ])

    return json_util.dumps(data)


# ===================
# Main
# ===================

if __name__ == '__main__':
    app.run(debug=debug, port=port)
